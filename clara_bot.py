"""
Clara Twitter Bot with OpenAI and Supabase integration

Supabase SQL Schema:
-- Create conversations table
-- Run this in your Supabase SQL editor:
/*
create table conversations (
    id bigint generated by default as identity primary key,
    user_id text not null,
    tweet_text text not null,
    response text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    embedding vector(1536)
);

-- Create index for user_id lookups
create index idx_conversations_user_id on conversations(user_id);

-- Enable vector extension if not already enabled
create extension if not exists vector;
*/
"""

import os
import time
import logging
from typing import Dict, Any, List
import tweepy
from openai import OpenAI
from dotenv import load_dotenv
from supabase import create_client, Client

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Initialize API clients
def init_twitter_client() -> tweepy.Client:
    """Initialize Twitter API client"""
    return tweepy.Client(
        bearer_token=os.getenv('TWITTER_BEARER_TOKEN'),
        consumer_key=os.getenv('TWITTER_API_KEY'),
        consumer_secret=os.getenv('TWITTER_API_SECRET'),
        access_token=os.getenv('TWITTER_ACCESS_TOKEN'),
        access_token_secret=os.getenv('TWITTER_ACCESS_SECRET')
    )

def init_openai_client() -> OpenAI:
    """Initialize OpenAI client"""
    return OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

def init_supabase_client() -> Client:
    """Initialize Supabase client"""
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_KEY')
    return create_client(supabase_url, supabase_key)

class ClaraBot:
    def __init__(self):
        """Initialize Clara bot with all necessary clients"""
        self.twitter = init_twitter_client()
        self.openai = init_openai_client()
        self.supabase = init_supabase_client()
        
    def process_mentions(self):
        """Process new mentions and generate responses"""
        try:
            # Get mentions (implement pagination if needed)
            mentions = self.twitter.get_users_mentions(
                self.twitter.get_me().data.id
            ).data
            
            if not mentions:
                logger.info("No new mentions to process")
                return
                
            for mention in mentions:
                self.handle_mention(mention)
                
        except Exception as e:
            logger.error(f"Error processing mentions: {e}")
            
    def handle_mention(self, mention: Dict[str, Any]):
        """Handle a single mention"""
        try:
            # Get conversation history from Supabase
            history = self.get_conversation_history(mention.author_id)
            
            # Generate response using OpenAI
            response = self.generate_response(mention.text, history)
            
            # Reply to tweet
            self.twitter.create_tweet(
                text=response,
                in_reply_to_tweet_id=mention.id
            )
            
            # Store conversation in Supabase
            self.store_conversation(mention.author_id, mention.text, response)
            
        except Exception as e:
            logger.error(f"Error handling mention {mention.id}: {e}")
    
    def generate_response(self, tweet_text: str, history: List[Dict[str, str]]) -> str:
        """Generate response using OpenAI"""
        try:
            # Format conversation history
            messages = [
                {"role": "system", "content": """You are Clara, a friendly and helpful AI assistant on Twitter. 
                You provide concise, engaging responses while maintaining a consistent personality.
                Keep responses under 280 characters to fit Twitter's limit.
                Be helpful but brief, and always maintain a positive, supportive tone."""}
            ]
            
            # Add conversation history
            for conv in history[-3:]:  # Include last 3 interactions for context
                messages.extend([
                    {"role": "user", "content": conv["tweet_text"]},
                    {"role": "assistant", "content": conv["response"]}
                ])
            
            # Add current tweet
            messages.append({"role": "user", "content": tweet_text})
            
            # Generate response
            response = self.openai.chat.completions.create(
                model="gpt-4",  # or gpt-3.5-turbo if preferred
                messages=messages,
                max_tokens=100,
                temperature=0.7,
                presence_penalty=0.6
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return "I apologize, but I'm having trouble processing your request right now. Please try again later! 🙏"
    
    def get_conversation_history(self, user_id: str) -> List[Dict[str, str]]:
        """Retrieve conversation history from Supabase"""
        try:
            # Get last 5 conversations with this user
            result = self.supabase.table('conversations') \
                .select('tweet_text,response') \
                .eq('user_id', user_id) \
                .order('created_at', desc=True) \
                .limit(5) \
                .execute()
            
            # Return conversations in chronological order
            return list(reversed(result.data))
            
        except Exception as e:
            logger.error(f"Error retrieving conversation history: {e}")
            return []
    
    def store_conversation(self, user_id: str, tweet: str, response: str):
        """Store conversation in Supabase"""
        try:
            # Get embedding for the conversation for potential future use
            embedding = self.openai.embeddings.create(
                model="text-embedding-ada-002",
                input=f"{tweet}\n{response}"
            ).data[0].embedding
            
            # Store conversation with embedding
            self.supabase.table('conversations').insert({
                'user_id': user_id,
                'tweet_text': tweet,
                'response': response,
                'embedding': embedding
            }).execute()
            
        except Exception as e:
            logger.error(f"Error storing conversation: {e}")

def main():
    """Main function to run the bot once"""
    try:
        logger.info("Starting Clara bot...")
        clara = ClaraBot()
        clara.process_mentions()
        logger.info("Finished processing mentions")
    except Exception as e:
        logger.error(f"Fatal error in main loop: {e}")

if __name__ == "__main__":
    main() 